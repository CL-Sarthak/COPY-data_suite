import { PatternTestingService } from './patternTestingService';

export interface LearnedPattern {
  regex: string;
  confidence: number;
  description: string;
}

export class PatternLearningService {
  private patternTestingService: PatternTestingService;

  constructor() {
    this.patternTestingService = new PatternTestingService();
  }

  /**
   * Learn multiple regex patterns from examples
   * This is useful for patterns like credit cards that have multiple formats
   */
  public learnMultiplePatterns(examples: string[]): LearnedPattern[] {
    const patterns: LearnedPattern[] = [];
    const groupedExamples = this.groupExamplesByFormat(examples);

    // For each group of similar examples, learn a pattern
    for (const [format, formatExamples] of Object.entries(groupedExamples)) {
      if (formatExamples.length === 0) continue;

      // Try to learn a pattern for this specific format
      const learnedRegex = this.patternTestingService.learnPatternFromExamples(formatExamples);
      
      if (learnedRegex) {
        patterns.push({
          regex: learnedRegex,
          confidence: this.calculateConfidence(formatExamples.length, examples.length),
          description: this.describeFormat(format, formatExamples[0])
        });
      }
    }

    // If no patterns were learned from groups, try learning from all examples
    if (patterns.length === 0) {
      const generalPattern = this.patternTestingService.learnPatternFromExamples(examples);
      if (generalPattern) {
        patterns.push({
          regex: generalPattern,
          confidence: 0.8,
          description: 'General pattern learned from all examples'
        });
      }
    }

    return patterns;
  }

  /**
   * Group examples by their format structure
   */
  private groupExamplesByFormat(examples: string[]): Record<string, string[]> {
    const groups: Record<string, string[]> = {};

    for (const example of examples) {
      if (!example || !example.trim()) continue;

      const format = this.detectFormat(example);
      if (!groups[format]) {
        groups[format] = [];
      }
      groups[format].push(example);
    }

    return groups;
  }

  /**
   * Detect the format of an example
   */
  private detectFormat(example: string): string {
    // Credit card formats - handle variable lengths
    if (/^\d+[-\s]\d+[-\s]\d+[-\s]?\d*$/.test(example)) {
      const parts = example.split(/[-\s]/);
      return `credit-card-${parts.map(p => p.length).join('-')}`;
    }
    if (/^\d{13,19}$/.test(example)) {
      return 'credit-card-plain';
    }

    // SSN formats
    if (/^\d{3}-\d{2}-\d{4}$/.test(example)) {
      return 'ssn-dashed';
    }
    if (/^\d{3}\.\d{2}\.\d{4}$/.test(example)) {
      return 'ssn-dotted';
    }
    if (/^\d{9}$/.test(example)) {
      return 'ssn-plain';
    }

    // Phone formats
    if (/^\(\d{3}\)\s?\d{3}-\d{4}$/.test(example)) {
      return 'phone-parentheses';
    }
    if (/^\d{3}-\d{3}-\d{4}$/.test(example)) {
      return 'phone-dashed';
    }
    if (/^\d{10}$/.test(example)) {
      return 'phone-plain';
    }
    if (/^\+1\s?\d{3}\s?\d{3}\s?\d{4}$/.test(example)) {
      return 'phone-international';
    }

    // Date formats
    if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(example)) {
      return 'date-slash-mdy';
    }
    if (/^\d{4}-\d{2}-\d{2}$/.test(example)) {
      return 'date-iso';
    }
    if (/^\d{1,2}-\d{1,2}-\d{4}$/.test(example)) {
      return 'date-dash-mdy';
    }

    // Email
    if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(example)) {
      return 'email';
    }

    // Address patterns
    if (/^\d+\s+[A-Za-z\s]+(?:Street|St|Avenue|Ave|Road|Rd|Drive|Dr|Lane|Ln|Boulevard|Blvd)$/i.test(example)) {
      return 'address-street';
    }
    if (/^[A-Za-z\s]+,\s*[A-Z]{2}$/i.test(example)) {
      return 'address-city-state';
    }

    // Default to generic structure
    return this.getGenericStructure(example);
  }

  /**
   * Get a generic structure representation
   */
  private getGenericStructure(text: string): string {
    return text
      .replace(/\d+/g, 'N')
      .replace(/[A-Z][a-z]+/g, 'W')
      .replace(/[a-z]+/g, 'w')
      .replace(/[A-Z]+/g, 'U')
      .replace(/\s+/g, '_');
  }

  /**
   * Calculate confidence based on how many examples support this format
   */
  private calculateConfidence(formatCount: number, totalCount: number): number {
    const ratio = formatCount / totalCount;
    // High confidence if most examples follow this format
    if (ratio > 0.8) return 0.95;
    if (ratio > 0.5) return 0.85;
    if (ratio > 0.3) return 0.75;
    return 0.65;
  }

  /**
   * Create a human-readable description of the format
   */
  private describeFormat(format: string, example: string): string {
    // Handle dynamic credit card formats
    if (format.startsWith('credit-card-') && format !== 'credit-card-plain') {
      const lengths = format.replace('credit-card-', '').split('-');
      const pattern = lengths.map(len => '#'.repeat(parseInt(len))).join('-');
      return `Number pattern with dashes (${pattern})`;
    }
    
    const descriptions: Record<string, string> = {
      'credit-card-plain': 'Credit card without separators (13-19 digits)',
      'ssn-dashed': 'SSN with dashes (###-##-####)',
      'ssn-dotted': 'SSN with dots (###.##.####)',
      'ssn-plain': 'SSN without separators (#########)',
      'phone-parentheses': 'Phone with parentheses ((###) ###-####)',
      'phone-dashed': 'Phone with dashes (###-###-####)',
      'phone-plain': 'Phone without separators (##########)',
      'phone-international': 'International phone (+1 ### ### ####)',
      'date-slash-mdy': 'Date MM/DD/YYYY format',
      'date-iso': 'Date ISO format (YYYY-MM-DD)',
      'date-dash-mdy': 'Date MM-DD-YYYY format',
      'email': 'Email address format',
      'address-street': 'Street address format',
      'address-city-state': 'City, State format'
    };

    return descriptions[format] || `Pattern matching structure: ${example}`;
  }
}

export const patternLearningService = new PatternLearningService();